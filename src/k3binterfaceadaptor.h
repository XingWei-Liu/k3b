/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a k3binterfaceadaptor -c K3bInterfaceAdaptor -i k3binterface.h -l K3b::Interface /home/ubuntu/k3b-19.12.3/src/org.k3b.MainWindow.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef K3BINTERFACEADAPTOR_H
#define K3BINTERFACEADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "k3binterface.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.k3b.MainWindow
 */
class K3bInterfaceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.k3b.MainWindow")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.k3b.MainWindow\">\n"
"    <method name=\"createDataProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"createAudioProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"createMixedProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"createVcdProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"createMovixProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"createVideoDvdProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"currentProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"openProject\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"projects\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"copyMedium\"/>\n"
"    <method name=\"copyMedium\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"dev\"/>\n"
"    </method>\n"
"    <method name=\"formatMedium\"/>\n"
"    <method name=\"writeImage\"/>\n"
"    <method name=\"writeImage\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"audioCdRip\"/>\n"
"    <method name=\"audioCdRip\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"dev\"/>\n"
"    </method>\n"
"    <method name=\"videoCdRip\"/>\n"
"    <method name=\"videoCdRip\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"dev\"/>\n"
"    </method>\n"
"    <method name=\"videoDvdRip\"/>\n"
"    <method name=\"videoDvdRip\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"dev\"/>\n"
"    </method>\n"
"    <method name=\"addUrls\">\n"
"      <arg direction=\"in\" type=\"as\" name=\"urls\"/>\n"
"    </method>\n"
"    <method name=\"addUrl\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"url\"/>\n"
"    </method>\n"
"    <method name=\"blocked\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    K3bInterfaceAdaptor(K3b::Interface *parent);
    virtual ~K3bInterfaceAdaptor();

    inline K3b::Interface *parent() const
    { return static_cast<K3b::Interface *>(QObject::parent()); }

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void addUrl(const QString &url);
    void addUrls(const QStringList &urls);
    void audioCdRip(const QString &dev);
    void audioCdRip();
    bool blocked();
    void copyMedium(const QString &dev);
    void copyMedium();
    QString createAudioProject();
    QString createDataProject();
    QString createMixedProject();
    QString createMovixProject();
    QString createVcdProject();
    QString createVideoDvdProject();
    QString currentProject();
    void formatMedium();
    QString openProject(const QString &url);
    QStringList projects();
    void videoCdRip(const QString &dev);
    void videoCdRip();
    void videoDvdRip(const QString &dev);
    void videoDvdRip();
    void writeImage(const QString &url);
    void writeImage();
Q_SIGNALS: // SIGNALS
};

#endif
