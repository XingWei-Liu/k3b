/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a k3bdataprojectinterfaceadaptor -c K3bDataProjectInterfaceAdaptor -i k3bdataprojectinterface.h -l K3b::DataProjectInterface /home/ubuntu/k3b-19.12.3/src/org.k3b.DataProject.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "k3bdataprojectinterfaceadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class K3bDataProjectInterfaceAdaptor
 */

K3bDataProjectInterfaceAdaptor::K3bDataProjectInterfaceAdaptor(K3b::DataProjectInterface *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

K3bDataProjectInterfaceAdaptor::~K3bDataProjectInterfaceAdaptor()
{
    // destructor
}

void K3bDataProjectInterfaceAdaptor::addUrl(const QString &url, const QString &dir)
{
    // handle method call org.k3b.DataProject.addUrl
    parent()->addUrl(url, dir);
}

void K3bDataProjectInterfaceAdaptor::addUrls(const QStringList &urls, const QString &dir)
{
    // handle method call org.k3b.DataProject.addUrls
    parent()->addUrls(urls, dir);
}

QStringList K3bDataProjectInterfaceAdaptor::children(const QString &path)
{
    // handle method call org.k3b.DataProject.children
    return parent()->children(path);
}

bool K3bDataProjectInterfaceAdaptor::createFolder(const QString &name, const QString &dir)
{
    // handle method call org.k3b.DataProject.createFolder
    return parent()->createFolder(name, dir);
}

bool K3bDataProjectInterfaceAdaptor::createFolder(const QString &name)
{
    // handle method call org.k3b.DataProject.createFolder
    return parent()->createFolder(name);
}

bool K3bDataProjectInterfaceAdaptor::isFolder(const QString &path)
{
    // handle method call org.k3b.DataProject.isFolder
    return parent()->isFolder(path);
}

bool K3bDataProjectInterfaceAdaptor::removeItem(const QString &path)
{
    // handle method call org.k3b.DataProject.removeItem
    return parent()->removeItem(path);
}

bool K3bDataProjectInterfaceAdaptor::renameItem(const QString &path, const QString &newName)
{
    // handle method call org.k3b.DataProject.renameItem
    return parent()->renameItem(path, newName);
}

void K3bDataProjectInterfaceAdaptor::setVolumeID(const QString &id)
{
    // handle method call org.k3b.DataProject.setVolumeID
    parent()->setVolumeID(id);
}


#include "k3bdataprojectinterfaceadaptor.moc"
